package main

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/tebeka/selenium"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	_ "github.com/lib/pq"
)

func TestGenerateVerificationCode(t *testing.T) {
	code := generateVerificationCode()

	// OTP –∫–æ–¥—ã —Ç”©—Ä—Ç —Ç–∞“£–±–∞–¥–∞–Ω —Ç“±—Ä—É—ã –∫–µ—Ä–µ–∫
	if len(code) != 4 {
		t.Errorf("Invalid OTP code length. Expected 4 digits, got: %d", len(code))
	}
}
func initTestDB() {
	var err error
	db, err = gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to test database: %v", err)
	}

	// –¢–µ—Å—Ç “Ø—à—ñ–Ω –∫–µ—Å—Ç–µ–ª–µ—Ä–¥—ñ –∂–∞—Å–∞—É
	db.AutoMigrate(&User{}, &TempUser{})

	// –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω —Ç–æ–ª—ã“ì—ã–º–µ–Ω —Ç–∞–∑–∞–ª–∞—É (–±–∞—Ä–ª—ã“õ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã ”©—à—ñ—Ä—É)
	db.Exec("DELETE FROM users")
	db.Exec("DELETE FROM temp_users")
}

func TestVerifyCode(t *testing.T) {
	initTestDB() // –¢–µ—Å—Ç–∫–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω SQLite –±–∞–∑–∞—Å—ã–Ω –¥–∞–π—ã–Ω–¥–∞—É

	// –¢—ñ—Ä–∫–µ–ª–≥–µ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã –∂–∞—Å–∞—É
	tempUser := TempUser{
		Name:             "Test User",
		Email:            "testuser@example.com",
		Password:         "testpassword",
		VerificationCode: "1234",
	}
	db.Create(&tempUser)

	// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å“±—Ä–∞–Ω—ã—Å—ã–Ω –∂–∞—Å–∞—É
	requestData := map[string]string{
		"email": "testuser@example.com",
		"code":  "1234",
	}

	body, _ := json.Marshal(requestData)
	request, _ := http.NewRequest("POST", "/verify-code", bytes.NewBuffer(body))
	response := httptest.NewRecorder()

	// –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω —à–∞“õ—ã—Ä—É
	verifyCode(response, request)

	// –¢–µ–∫—Å–µ—Ä—É: HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã 200 –±–æ–ª—É –∫–µ—Ä–µ–∫
	if response.Code != http.StatusOK {
		t.Errorf("Expected status code 200, got: %d", response.Code)
	}

	// –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –±–∞—Ä –º–∞, —Ç–µ–∫—Å–µ—Ä—É
	var user User
	err := db.Where("email = ?", "testuser@example.com").First(&user).Error
	if err != nil {
		t.Errorf("Verified user not found in the database")
	}
}

func TestLoginWithOTP(t *testing.T) {
	const (
		chromeDriverPath = "/opt/homebrew/bin/chromedriver" // macOS (Homebrew –∞—Ä“õ—ã–ª—ã –æ—Ä–Ω–∞—Ç—ã–ª“ì–∞–Ω)

		// Selenium —Å–µ—Ä–≤–µ—Ä—ñ–Ω—ñ“£ URL-—ñ
		seleniumURL = "http://localhost:4444/wd/hub"

		// –°—ñ–∑–¥—ñ“£ —Å–∞–π—Ç—Ç—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ –±–µ—Ç—ñ
		baseURL = "http://127.0.0.1:5501/login.html"

		// –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω—ã“£ –±–∞–π–ª–∞–Ω—ã—Å –∂–æ–ª—ã
		dbConnString = "postgres://postgres:postgres@localhost/gaming_club?sslmode=disable"
	)

	// üîπ ChromeDriver “õ—ã–∑–º–µ—Ç—ñ–Ω —ñ—Å–∫–µ “õ–æ—Å—É
	service, err := selenium.NewChromeDriverService(chromeDriverPath, 4444)
	if err != nil {
		t.Fatalf("Error starting ChromeDriver: %v", err)
	}
	defer service.Stop()

	// üîπ WebDriver –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ
	caps := selenium.Capabilities{"browserName": "chrome"}
	wd, err := selenium.NewRemote(caps, seleniumURL)
	if err != nil {
		t.Fatalf("Error connecting to WebDriver: %v", err)
	}
	defer wd.Quit()

	// üîπ –ë–∞—Å—Ç—ã –±–µ—Ç—Ç—ñ –∂“Ø–∫—Ç–µ—É
	if err := wd.Get(baseURL); err != nil {
		t.Fatalf("Failed to load page: %v", err)
	}

	// üîπ –õ–æ–≥–∏–Ω –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω —Ç–∞–±—É –∂”ô–Ω–µ –±–∞—Å—É
	loginLink, err := wd.FindElement(selenium.ByID, "loginButton")
	if err != nil {
		t.Fatalf("Login link not found: %v", err)
	}
	loginLink.Click()
	time.Sleep(2 * time.Second) // –ú–æ–¥–∞–ª—å –∂“Ø–∫—Ç–µ–ª–≥–µ–Ω—à–µ –∫“Ø—Ç—É

	// üîπ Email –µ–Ω–≥—ñ–∑—É
	email, err := wd.FindElement(selenium.ByID, "email")
	if err != nil {
		t.Fatalf("Email input not found: %v", err)
	}
	email.SendKeys("nurbibirahmanberdy@gmail.com")

	// üîπ “ö“±–ø–∏—è —Å”©–∑ –µ–Ω–≥—ñ–∑—É
	password, err := wd.FindElement(selenium.ByID, "password")
	if err != nil {
		t.Fatalf("Password input not found: %v", err)
	}
	password.SendKeys("123")

	// üîπ –õ–æ–≥–∏–Ω –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—É
	loginButton, err := wd.FindElement(selenium.ByID, "loginButton")
	if err != nil {
		t.Fatalf("Login button not found: %v", err)
	}
	loginButton.Click()

	time.Sleep(3 * time.Second) // OTP –∫–æ–¥—ã–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É “Ø—à—ñ–Ω –∫“Ø—Ç—É

	// üîπ –î–µ—Ä–µ–∫—Ç–µ—Ä –±–∞–∑–∞—Å—ã–Ω–∞–Ω OTP –∫–æ–¥—ã–Ω –∞–ª—É
	db, err := sql.Open("postgres", dbConnString)
	if err != nil {
		t.Fatalf("Failed to connect to DB: %v", err)
	}
	defer db.Close()

	var otp string
	query := "SELECT otp FROM users WHERE email = $1 AND otp IS NOT NULL"
	err = db.QueryRow(query, "nurbibirahmanberdy@gmail.com").Scan(&otp)
	if err != nil {
		t.Fatalf("Failed to fetch OTP: %v", err)
	}

	// WebDriver “Ø—à—ñ–Ω –∫“Ø—Ç—É–¥—ñ –∞–Ω—ã“õ—Ç–∞—É
wd.SetImplicitWaitTimeout(10 * time.Second)

// OTP ”©—Ä—ñ—Å—ñ–Ω –∫“Ø—Ç—É
otpInput, err := wd.FindElement(selenium.ByID, "otpinput")
if err != nil {
	t.Fatalf("OTP input field not found: %v", err)
}
otpInput.SendKeys(otp)

// OTP –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –∫“Ø—Ç—É
verifyButton, err := wd.FindElement(selenium.ByID, "otp")
if err != nil {
	t.Fatalf("Verify button not found: %v", err)
}
verifyButton.Click()

// –ü—Ä–æ—Ñ–∏–ª—å —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω—ñ“£ –±–∞—Ä-–∂–æ“ì—ã–Ω –∫“Ø—Ç—É
if _, err := wd.FindElement(selenium.ByLinkText, "Profile"); err != nil {
	t.Fatalf("Profile link not found after login: %v", err)
}

t.Log("Login successful with OTP!")


}
